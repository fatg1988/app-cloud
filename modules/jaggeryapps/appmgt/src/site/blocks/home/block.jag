<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include('/jagg/constants.jag');
include("/jagg/jagg.jag");

jagg.block("home", {
    initialize:function (data) {

    },
    getInputs:function () {
        return {
            "applicationName": null
        }
    },
    getOutputs:function (inputs) {
        var log = new Log();
        var applicationModule = jagg.module("application");
        var managerModule = jagg.module("manager");
        var appTypePropertyConfPath = jagg.getAppTypePropertyConfFilePath();
        var parsedObject = parse(appTypePropertyConfPath);
        var appTypesProperties = require(parsedObject);
        var application = applicationModule.getApplication(inputs.applicationKey);
        application["appTypeIcon"] = appTypesProperties[application.applicationType].icon;

        var selectedRevision = request.getParameter("selectedRevision");
        if (!selectedRevision) {
            selectedRevision = applicationModule.getSelectedRevisionFromSession(inputs.applicationKey);
        }

        if(!selectedRevision && application.defaultVersion){
            selectedRevision = application.defaultVersion;
        } else if (!application.defaultVersion) {
            selectedRevision = Object.keys(application.versions)[application.versions.length];
        }

        var restartCounts = applicationModule.getRestartCounts(application.applicationName, selectedRevision, application.applicationType);
        var selectedVersion = application.versions[selectedRevision];
        var conSpecCpu = selectedVersion.conSpecCpu;
        var conSpecMemory = selectedVersion.conSpecMemory;
        var dataAnalyticsServerUrl = managerModule.getPropertyValue(DATA_ANALYTICS_SERVER_URL);
        var tenantDomain = managerModule.getTenantDomain();

        var pageTitle = managerModule.getCloudTypeProperties().pageTitle;
        var maxAppCount = jagg.module("throttling").getMaxInstanceCount();
        var applicationCount = applicationModule.getRunningApplicationVersionCount();
        var cloudSpecificApplicationRepresentation = managerModule.getCloudTypeProperties().cloudSpecificApplicationRepresentation;

        var requestNewAppTypeSubjectMessage = 'Requesting to keep ' + cloudSpecificApplicationRepresentation.toLowerCase() + ' : ' + application.applicationName + ' running for an extended period of time';
        var requestNewAppTypeURL = managerModule.getPropertyValue(CLOUD_MGT_URL) + CONTACT_US_URL +
                '?cloudType=' + jagg.getSelectedCloud() + '&subject=' + requestNewAppTypeSubjectMessage;

        var dashboardProperties = managerModule.getDashboardTypeProperties();
        var replicaCount = applicationModule.getReplicaCountForVersion(application.applicationName, selectedRevision);

        var ballerinaComposerImage = managerModule.getPropertyValue(BALLERINA_COMPOSER_BASE_IMAGE);
        var domainURL = managerModule.getPropertyValue(APP_LAUNCH_URL_PUBLIC);
        var throttlingModule = jagg.module("throttling");
        var isApplicationStartPossible = throttlingModule.isApplicationStartPossible(selectedVersion.hashId);
        var integrationCloudURL = managerModule.getPropertyValue(INTEGRATION_CLOUD_URL);

        return {
            "application" : application,
            "selectedRevision" : selectedRevision,
            "conSpecCpu" : conSpecCpu,
            "conSpecMemory" : conSpecMemory,
            "restartCounts" : restartCounts,
            "pageTitle" : pageTitle,
            "applicationCount" : applicationCount,
            "maxAppCount" : maxAppCount,
            "cloudSpecificApplicationRepresentation" : cloudSpecificApplicationRepresentation,
            "requestNewAppTypeURL" : requestNewAppTypeURL,
            "dashboardProperties" : dashboardProperties,
            "dataAnalyticsServerUrl" : dataAnalyticsServerUrl,
            "tenantDomain" : tenantDomain,
            "replicaCount" : replicaCount,
            "ballerinaComposerImage" : ballerinaComposerImage,
            "domainURL" : domainURL,
            "integrationCloudURL" : integrationCloudURL,
            "isApplicationStartPossible" : isApplicationStartPossible
        };
    }

});
%>
